- hosts: localhost
  become: yes
  tasks:

    - name: update APT packages
      apt:
        update_cache: yes

    - name: disable SWAP (Kubeadm requirement)
      shell: |
        swapoff -a

    - name: disable SWAP in fstab (Kubeadm requirement)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: create an empty file for the Containerd module
      copy:
        content: ""
        dest: /etc/modules-load.d/containerd.conf
        force: no

    - name: configure modules for Containerd
      blockinfile:
        path: /etc/modules-load.d/containerd.conf
        block: |
             overlay
             br_netfilter
    - name: Add the overlay module
      community.general.modprobe:
        name: overlay
        state: present
    - name: Add the br_netfilter module
      community.general.modprobe:
        name: br_netfilter
        state: present

    - name: create an empty file for Kubernetes sysctl params
      copy:
        content: ""
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        force: no

    - name: configure sysctl params for Kubernetes
      lineinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        line: "{{ item }}"
      with_items:
        - 'net.bridge.bridge-nf-call-iptables  = 1'
        - 'net.ipv4.ip_forward                 = 1'
        - 'net.bridge.bridge-nf-call-ip6tables = 1'

    - name: apply sysctl params without reboot
      command: sysctl --system
    - name: 2. Install dependency packages
      apt:
        name={{ item }}
      with_items:
        - apt-transport-https
        - ca-certificates
        - curl
        - gpg

    - name: Create APT keyring directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
        owner: root
        group: root


    - name: Check if docker key exists
      stat:
        path: /etc/apt/keyrings/docker.gpg
      register: docker_gpg

    # TODO: cleanup docker.asc
    - name: Download docker armored signature
      get_url:
        url: https://download.docker.com/linux/debian/gpg
        dest: /tmp/docker.asc
      when: not docker_gpg.stat.exists

    - name: Dearmor docker asc
      command: /usr/bin/gpg --dearmor -o /etc/apt/keyrings/docker.gpg /tmp/docker.asc
      when: not docker_gpg.stat.exists

    - name: Add docker apt repository.
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes
        filename: docker

    - name: Check if kubernetes key exists
      stat:
        path: /etc/apt/keyrings/kubernetes.gpg
      register: kubernetes_gpg

    # TODO: cleanup docker.asc
    - name: Download docker armored signature
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
        dest: /tmp/kubernetes.asc
      when: not kubernetes_gpg.stat.exists

    - name: Dearmor docker asc
      command: /usr/bin/gpg --dearmor -o /etc/apt/keyrings/kubernetes.gpg /tmp/kubernetes.asc
      when: not kubernetes_gpg.stat.exists


    - name: add Kubernetes' APT repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
        state: present
        update_cache: yes

    - name: install Containerd
      apt:
        name: containerd.io
        state: present

    - name: create Containerd directory
      file:
        path: /etc/containerd
        state: directory
    - name: create Containerd directory
      file:
        path: /etc/containerd
        state: directory

    - name: add Containerd configuration
      shell: /usr/bin/containerd config default > /etc/containerd/config.toml

    - name: configuring the systemd cgroup driver for Containerd
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '            SystemdCgroup = false'
        line: '            SystemdCgroup = true'

    - name: configuring discard layers form Containerd
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '            discard_unpacked_layers = false'
        line: '            discard_unpacked_layers = true'
    - name: enable the Containerd service and start it
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon-reload: yes
    - name: Downloading runc
      ansible.builtin.get_url:
        url: "https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64"
        dest: "/usr/local/sbin/runc"
        mode: "0755"
